TEST DOCUMENTATION
===================

USER INTERFACE TESTING: Note that there is no user interface testing. Instead,
the testing is based on the different edges cases of data to verify correctness.

IO TESTING:

TEST 1: INVALID COMMAND LINE ARGUMENTS
------
DESCRIPTION: This test focuses on testing the input of the program as it portrays to handling of the input parameters
specified in argv. In case an invalid input is given, the program should display an appropriate message to stderr.
Such errors in accepting command line arguments include:
a) Invalid # of parameters
b) Invalid size of parameters
c) Invalid type of parameters

SAMPLE DATA:
./soda soda.config 10 10 10
./soda notExist.config
./soda soda.config -1
./soda soda.config helloWorld
./soda 10 10

CODE TESTED:
main.cc:26-38

SCRIPT:
Script started on Thu 28 Nov 2013 06:30:29 PM EST
1%>linux032:~/cs343/a6/cs343-a6> ./soda soda.config 10 10 10
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
1%>linux032:~/cs343/a6/cs343-a6> ./soda notExist.config
Error: could not open input file "notExist.config"
1%>linux032:~/cs343/a6/cs343-a6> ./soda soda.config -1
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
1%>linux032:~/cs343/a6/cs343-a6> ./soda soda.config helloWorld
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
1%>linux032:~/cs343/a6/cs343-a6> ./soda 10 10
Error: could not open input file "10"
1%>linux032:~/cs343/a6/cs343-a6> exit
exit
Script done on Thu 28 Nov 2013 06:31:27 PM EST

ANALYSIS:
We can see the detection of incorrect # of argument params, in this case too many results in an error. Likewise, the
provided config handling allowed us to detect non-existing files and display an error. Lastly, for type checking and
invalid ranges for inputs, we threw the usage message. Finally, the usage message was to stderr and not stdout.


TEST 2: PROGRAM OUTPUT
------
DESCRIPTION: This test focuses on the output generated by the program. Specifically, this test case covers the
functionality of the printer class, and makes sure that the output is correctly formatted.
Such errors that would provide incorrect output include:
a) Invalid formatting of table (e.g. missing tabs, incorrect id numbering, etc.)
b) Missing columns for the different tasks
c) Handling of printing for various StatusNodes
  i) Making sure type is printed (e.g. “M”, “F”, “S”, etc)
  i) If type supports additional count, making sure that is printed
  i) If type supports a second count, making sure that is printed
d) Output of finish

SAMPLE DATA:
./soda soda.config 10
./soda soda.config

CODE TESTED:
printer.h
printer.cc

SCRIPT:
Script started on Thu 28 Nov 2013 06:58:55 PM EST
1%>linux024:~/cs343/a6/cs343-a6> ./soda soda.config 10 > test.out
1%>linux024:~/cs343/a6/cs343-a6> ./soda soda.config
Parent  WATOFF  Names Truck Plant Stud0 Stud1 Mach0 Mach1 Mach2 Cour0
*******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******
S S S         S2      S
    R0    S       S2  S2
D0,2  W R1  S G S3,3  S3,2
D1,2  C0,5  R2                t0,5
D1,1  C1,5  N0,0      V0          T0,5
D0,3    N1,1        V1        t1,5
   Lines removed to save space
... ... ... ... ... ... F ... ... ... ...
D1,1                R r
D0,2                  R
   Lines removed to save space
... F ... ... ... ... ... ... ... ... ...
D1,2
F ... ... ... ... ... ... ... ... ... ...
***********************
1%>linux024:~/cs343/a6/cs343-a6> exit
exit
Script done on Thu 28 Nov 2013 07:04:18 PM EST

ANALYSIS:
In the first sample script, we can verify that the tables are formatted correctly. To test this, we had used `vim` and
ran a :set list to ensure that we matched the \t and \n specifications.
For (b), we specified the default config parameters and we can see that we applied the correct numbering and number of
columns (along with the trailing underline using ‘*’) separated by \t respectively. For (c) we were can see that the
various States generate the correct number of additional count arguments. For example, “r”, “S”, “D0,2”, etc from the
following tasks. Lastly for (d), we are able to confirm that the “finish lines” are correctly output and show the “F”
corresponding to the appropriate task


PROGRAM TESTING:

TEST 3: TEST DEADLOCK
------
DESCRIPTION: This program contains a lot of moving pieces which rely on each other.  In order to ensure the program
successfully terminates with no deadlocks, it was executed with large input values.

SAMPLE DATA:
soda.config
SodaCost                     2
NumStudents                100
MaxPurchases              30
NumVendingMachines   100
MaxStockPerFlavour      9
MaxShippedPerFlavour  30
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1

CODE TESTED:
*.cc, *.h

SCRIPT:
Script started on Thu 28 Nov 2013 05:31:59 PM EST
1%>linux024:~/cs343/a6> cat soda.config
SodaCost                     2
NumStudents                100
MaxPurchases              30
NumVendingMachines   100
MaxStockPerFlavour      9
MaxShippedPerFlavour  30
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1
1%>linux024:~/cs343/a6> ./soda > output
1%>linux024:~/cs343/a6> exit
exit
Script done on Thu 28 Nov 2013 05:32:30 PM EST

ANALYSIS:
The program ran to completion with no problems.  A few iteration of test with large inputs were executed to ensure the
first run didn’t go to completion by luck.  As seen through the results of these tests, the program is free of
deadlocks.


TEST 4: TEST STARVATION
------
In order to test starvation, careful studying of the output is required.  A config file with smaller input values was
used to make it easier to trace the output and detect starvation.

SAMPLE DATA:
soda.config
SodaCost                     2
NumStudents                8
MaxPurchases              10
NumVendingMachines   8
MaxStockPerFlavour      9
MaxShippedPerFlavour  30
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1

CODE TESTED:
*.cc, *.h

SCRIPT:
Parent  WATOFF  Names Truck Plant Stud0 Stud1 Stud2 Stud3 Stud4 Stud5 Stud6 Stud7 Mach0 Mach1 Mach2 Mach3 Mach4 Mach5
Mach6 Mach7 Cour0
*******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******
*******  *******  *******  *******  *******  *******  *******  *******
S S S                     S2                S
    R0    S                   S2  S2  S2  S2  S2  S2  S2
D4,3  W R1  S G S3,8  S0,3  S0,7  S1,8  S3,10 S3,7  S3,1  S2,9
D7,3  C0,5  R2                                                  …
                    ...
                    ...
   Lines removed to save space
                    ...
                    ...
                    ...

F ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
***********************
1%>linux024:~/cs343/a6> exit
exit
Script done on Thu 28 Nov 2013 06:24:27 PM EST


ANALYSIS:
By carefully walking through the output of the program, no evident signs of starvation were present.  Every entity got
a chance to run, and execute the tasks it was assigned to.  3 more tests of various sizes were performed to ensure
the success of the first test was not an accident.

TEST 5: STANDARD RUN WITH OUTPUT
------
DESCRIPTION: Ensure that a complete run of the soda program executes with valid output

SAMPLE DATA:
Default soda.config
./soda soda.config

CODE TESTED:
*.h, *.cc

SCRIPT:
Script started on Mon 02 Dec 2013 10:03:10 PM EST
1%>linux028:~/cs343/a6/cs343-a6> ./soda soda.config
Parent  WATOFF  Names Truck Plant Stud0 Stud1 Mach0 Mach1 Mach2 Cour0
******* ******* ******* ******* ******* ******* ******* ******* ******* ******* *******
S S S               S
D0,1    R0          S2
D0,1    R1            S2
D1,1    R2    S         S2
  C0,5  N0,0    G S2,4
D1,1  W   S   V0  S2,4        t0,5
D1,2  C1,5  N0,1      V1          T0,5
D1,2  W                 t1,5
    N1,1        V1        T1,5
D0,3    N1,2        V2
    N0,2  P4    V2
      d0,4
      U0,16
D1,3      D0,0  P
D0,3    N1,0    G   V0  r
D0,1      P8
      d0,8
      U0,8
D1,2      D0,0  P
      d1,0  G     r
      U1,20
D0,3    N0,0  D1,0    V0    R r
D0,1          B3    B2,1
D1,3          B1    B2,0
D1,3      P5
    N1,1  d0,5  P   V1
D1,2      U0,5  G
D0,3      D0,0        r
      d1,0
      U1,20
D1,1  T0,7    D1,0        R r
D1,3  W                 t0,7
D0,2      P10             T0,7
      d0,10
      D0,5  P
D1,3      d1,5  G     r
      U1,15
D0,3      D1,0        R r
      P10   B6    B2,4
D0,1      d0,10 P
D1,2      D0,9  G     r
      d1,9
      U1,6
D0,1      D1,0        R r
      d2,0    B4    B2,4
      U2,20
      D2,0
... ... ... ... ... F ... ... ... ... ...
D1,1                R r
D1,3      P6      B3    B2,1
      d0,6
      U0,0
      D0,5  P
D0,2      d1,5  G     r
      U1,4
D1,1      D1,2        R r
      d2,2
      U2,18
D0,3      D2,0          R r
D1,1      P5      B1    B2,0
      d0,5
      U0,0
D1,2      D0,5  P
      d1,5  G     r
      U1,3
D0,2      D1,3        R r
      d2,3
      U2,15
D1,1      D2,0          R r
D1,3  T1,7                R
D0,3  W                 t1,7
      P8      B6    B2,1    T1,7
      d0,8
      U0,0
D0,1      D0,8  P
      d1,8  G     r
      U1,1
D1,2      D1,5        R r
      d2,5
      U2,13
D0,1      D2,3          R r
D1,1      P6            R
      d0,6
      U0,0
      D0,6  P   B4    B2,3
D0,2        G     r
... ... ... ... ... ... F ... ... ... ...
      d1,6
      U1,0
D1,1      D1,4        R r
      d2,4
      U2,10
D0,1      D2,1          R r
D1,3                  R
D1,3
D1,2
... ... ... F ... ... ... ... ... ... ...

... ... ... ... F ... ... ... ... ... ...
D1,2
... ... ... ... ... ... ... F ... ... ...
D1,2
... ... ... ... ... ... ... ... F ... ...
D0,2
... ... ... ... ... ... ... ... ... F ...
D1,3
... ... F ... ... ... ... ... ... ... ...
D1,1
D0,2
... ... ... ... ... ... ... ... ... ... F

... F ... ... ... ... ... ... ... ... ...
D0,2
F ... ... ... ... ... ... ... ... ... ...
***********************
1%>linux028:~/cs343/a6/cs343-a6> exit
exit
Script done on Mon 02 Dec 2013 10:05:18 PM EST

ANALYSIS:
We can talk through the code to see that the various students are able to buy, there are some watcards that are lost,
and the general functionality of the vending machines is being supplied by the trucks. Likewise, the production occurs
within the bottling plant. In short, the "correctness" of the output is similar to the sample solution, the code
executes and terminates.

TEST 6: ONE VENDING MACHINE WITH MANY STUDENTS
------
DESCRIPTION: Ensure one vending machine can handle lots of student requests

SAMPLE DATA:
soda.config
SodaCost                     2
NumStudents                50
MaxPurchases              10
NumVendingMachines   1
MaxStockPerFlavour      9
MaxShippedPerFlavour  30
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1

CODE TESTED:
student.cc, vendingmachine.cc

SCRIPT:
Script started on Thu 28 Nov 2013 06:45:40 PM EST
1%>linux024:~/cs343/a6> cat soda.config
SodaCost                     2
NumStudents                50
MaxPurchases              10
NumVendingMachines   1
MaxStockPerFlavour      9
MaxShippedPerFlavour  30
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1
1%>linux024:~/cs343/a6> ./soda > output
1%>linux024:~/cs343/a6> exit
exit
Script done on Thu 28 Nov 2013 06:46:12 PM EST

ANALYSIS:
In order to save space, the output was sent to a file.  By tracing through the output file we noticed that all the
students got turns to make a purchase from the vending machine, and all entities terminated gracefully.


TEST 7: MANY VENDING MACHINES WITH ONE STUDENT
-------
DESCRIPTION: Ensure the combination of one student and many vending machines successfully terminates.

SAMPLE DATA:
soda.config
SodaCost                     2
NumStudents                1
MaxPurchases              10
NumVendingMachines   50
MaxStockPerFlavour      9
MaxShippedPerFlavour  30
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1

CODE TESTED:
student.cc, vendingmachine.cc

SCRIPT:
Script started on Thu 28 Nov 2013 06:55:14 PM EST
1%>linux032:~/cs343/a6> cat soda.config
SodaCost                     2
NumStudents                1
MaxPurchases              10
NumVendingMachines   10
MaxStockPerFlavour      9
MaxShippedPerFlavour  30
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1
1%>linux032:~/cs343/a6> ./soda
Parent  WATOFF  Names Truck Plant Stud0 Mach0 Mach1 Mach2 Mach3 Mach4 Mach5 Mach6 Mach7 Mach8 Mach9 Cour0
*******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******  *******
*******  *******  *******
S S S       S2                    S
             …
                    ...
                    ...
   Lines removed to save space
                    ...
                    ...
                    ...
D0,1
F ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...
***********************
1%>linux032:~/cs343/a6> exit
exit
Script done on Thu 28 Nov 2013 06:55:30 PM EST

ANALYSIS:
By tracing through the output we noticed that the student purchased as many drinks as they were assigned to.  All the
purchases, however, were from the same vending machine.  This was expected, as the vending machine was consistently
getting restocked, therefore never running out of the students favourite flavour.


TEST 8: MANY VENDING MACHINES, STUDENTS WITH ONE COURIER
-------
DESCRIPTION: Here, we bottleneck on the courier and confirm that many students with many vending machine does not lead
to a case where starvation prevents the program from finishing. This test also serves as an initial regression test of
large input sizes.

SAMPLE DATA:
./soda soda.config 10
SodaCost                     2
NumStudents                100
MaxPurchases              8
NumVendingMachines   100
MaxStockPerFlavour      5
MaxShippedPerFlavour  3
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 1

CODE TESTED:
*.h, *.cc

SCRIPT:
Script started on Thu 28 Nov 2013 07:46:14 PM EST
1%>linux024:~/cs343/a6/cs343-a6> ./soda soda.config 10 > test.out
1%>linux024:~/cs343/a6/cs343-a6> ./soda soda.config 10
  Lines removed to save space
***********************
1%>linux024:~/cs343/a6/cs343-a6> wc -l test.out
33535 test.out
1%>linux024:~/cs343/a6/cs343-a6> exit
exit
Script done on Thu 28 Nov 2013 07:46:40 PM EST

ANALYSIS:
Firstly, we can see that the program terminated in a reasonable time, therefore we do not have an the courier being
constantly starved. Secondly, we can analyze that the vending machine, and student interact fairly throughout the
simulation (w.r.t the re-supplying from the truck.


TEST 9: HIGH # OF STUDENTS, VENDINGMACHINES, COURIERS
----------
DESCRIPTION: This test serves as a regression based test, as it allows us to confirm and see program behaviour when
large input sizes are specified for student, vending machine, etc. It also tests our program by running a “better”
regression task as more tasks can increase the likelihood of certain edge conditions on a uniprocessor run.

SAMPLE DATA:
./soda soda.config
./soda soda.config 10
SodaCost                     2
NumStudents                100
MaxPurchases              10
NumVendingMachines   100
MaxStockPerFlavour      10
MaxShippedPerFlavour  100
TimeBetweenShipments 3
ParentalDelay                2
NumCouriers                 100

CODE TESTED:
*.h, *.cc

SCRIPT:
1%>linux024:~/cs343/a6/cs343-a6> ./soda soda.config 10 > test.out
1%>linux024:~/cs343/a6/cs343-a6> ./soda soda.config 10
  Lines removed to save space
***********************
1%>linux024:~/cs343/a6/cs343-a6> wc -l test.out
8896 test.out
1%>linux024:~/cs343/a6/cs343-a6> ./soda_64 soda.config 10 > test.out
1%>linux024:~/cs343/a6/cs343-a6> wc -l test.out
6531 test.out
1%>linux024:~/cs343/a6/cs343-a6> exit
exit

ANALYSIS:
Firstly, we notice that the program terminates. Secondly, we see that the program sized compared to the provided
solution are relatively close in size (with the large number of tasks, the range is somewhat to be expected). After
running this a few times, we did see the difference in size shrink a bit with our solution to the expected solution.